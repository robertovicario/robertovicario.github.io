---
interface NavItem {
	label: string;
	href: string;
	icon: string;
}

const navItems: NavItem[] = [
	{
		label: "Home",
		href: "#home",
		icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16"><path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293zM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5z"/></svg>`,
	},
	{
		label: "About",
		href: "#about",
		icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-person" viewBox="0 0 16 16"><path d="M8 8a3 3 0 1 0 0-6 3 3 0 0 0 0 6m2-3a2 2 0 1 1-4 0 2 2 0 0 1 4 0m4 8c0 1-1 1-1 1H3s-1 0-1-1 1-4 6-4 6 3 6 4m-1-.004c-.001-.246-.154-.986-.832-1.664C11.516 10.68 10.289 10 8 10s-3.516.68-4.168 1.332c-.678.678-.83 1.418-.832 1.664z"/></svg>`,
	},
	{
		label: "Projects",
		href: "#projects",
		icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-code-slash" viewBox="0 0 16 16"><path d="M10.478 1.647a.5.5 0 1 0-.956-.294l-4 13a.5.5 0 0 0 .956.294zM4.854 4.146a.5.5 0 0 1 0 .708L1.707 8l3.147 3.146a.5.5 0 0 1-.708.708l-3.5-3.5a.5.5 0 0 1 0-.708l3.5-3.5a.5.5 0 0 1 .708 0m6.292 0a.5.5 0 0 0 0 .708L14.293 8l-3.147 3.146a.5.5 0 0 0 .708.708l3.5-3.5a.5.5 0 0 0 0-.708l-3.5-3.5a.5.5 0 0 0-.708 0"/></svg>`,
	},
	{
		label: "Contact",
		href: "#contact",
		icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-chat-dots" viewBox="0 0 16 16"><path d="M5 8a1 1 0 1 1-2 0 1 1 0 0 1 2 0m4 0a1 1 0 1 1-2 0 1 1 0 0 1 2 0m3 1a1 1 0 1 0 0-2 1 1 0 0 0 0 2"/><path d="m2.165 15.803.02-.004c1.83-.363 2.948-.842 3.468-1.105A9 9 0 0 0 8 15c4.418 0 8-3.134 8-7s-3.582-7-8-7-8 3.134-8 7c0 1.76.743 3.37 1.97 4.6a10.4 10.4 0 0 1-.524 2.318l-.003.011a11 11 0 0 1-.244.637c-.079.186.074.394.273.362a22 22 0 0 0 .693-.125m.8-3.108a1 1 0 0 0-.287-.801C1.618 10.83 1 9.468 1 8c0-3.192 3.004-6 7-6s7 2.808 7 6-3.004 6-7 6a8 8 0 0 1-2.088-.272 1 1 0 0 0-.711.074c-.387.196-1.24.57-2.634.893a11 11 0 0 0 .398-2"/></svg>`,
	},
];
---

<div class="flex justify-center w-full">
	<nav
		id="main-nav"
		class="fixed left-1/2 -translate-x-1/2 z-[100] bg-[var(--background)] border border-1 border-transparent backdrop-blur-xl transition-all duration-500 ease-in-out md:top-6 md:bottom-auto bottom-0 w-[80%]"
	>
		<div class="container mx-auto flex justify-center items-center p-3">
			<ul
				class="flex w-full justify-between md:space-x-6 md:justify-center md:gap-12 gap-6"
			>
				{
					navItems.map((item) => (
						<li class="flex-1 md:flex-none">
							<a
								href={item.href}
								class="flex flex-col items-center gap-1 text-[var(--white-icon)] transition-colors text-xs md:text-base relative group"
							>
								<div class="absolute -left-6 top-1/2 -translate-y-1/2 w-2 h-2 rounded-full transition-all duration-300 scale-0 opacity-0 bg-[#A9FF5B] nav-indicator hidden md:block" />
								<span class="md:hidden flex items-center justify-center w-6 h-6">
									<fragment set:html={item.icon} />
								</span>
								<span class="hidden md:inline-block">
									{item.label}
								</span>
								<span class="md:hidden">{item.label}</span>
							</a>
						</li>
					))
				}
			</ul>
		</div>
	</nav>
</div>

<style>
	nav {
		transform: translateX(-50%);
		background-color: var(--background);
		transition:
			background-color 0.3s ease,
			border-radius 0.3s ease,
			border-color 0.3s ease;
	}

	nav.scrolling {
		background-color: var(--component-bg);
		border-color: #ffffff10;
		border-radius: 9999px;
	}

	nav a.active .nav-indicator {
		transform: translateY(-50%) scale(1);
		opacity: 1;
	}

	nav a.active {
		color: white !important;
	}

	@media (max-width: 767px) {
		nav {
			width: 100% !important;
			transform: translateX(-50%);
			bottom: 0;
			left: 50%;
			position: fixed;
			border-radius: 1rem 1rem 0 0;
			border-color: #ffffff10;
		}

		nav.scrolling {
			border-radius: 1rem 1rem 0 0;
			background-color: var(--component-bg);
		}

		body {
			padding-bottom: 70px;
		}
	}
</style>

<script>
	const nav = document.getElementById("main-nav");
	const maxScroll = 1000;
	let rafId: number | null = null;

	function updateNav() {
		if (window.scrollY > 0) {
			nav?.classList.add("scrolling");

			const scrollProgress = Math.min(window.scrollY / maxScroll, 1);
			const easeProgress = 1 - Math.pow(1 - scrollProgress, 4);

			const minWidth = 528;
			const maxWidth = window.innerWidth * 0.8;
			const currentWidth =
				maxWidth - (maxWidth - minWidth) * easeProgress;

			if (window.innerWidth >= 768) {
				nav?.style.setProperty("width", `${currentWidth}px`);
			}
		} else {
			nav?.classList.remove("scrolling");
			nav?.style.setProperty("width", "80%");
		}
		rafId = null;
	}

	window.addEventListener(
		"scroll",
		() => {
			if (!rafId) {
				rafId = requestAnimationFrame(updateNav);
			}
		},
		{ passive: true }
	);

	document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e) {
			e.preventDefault();
			const target = e.currentTarget as HTMLAnchorElement;
			const targetId = target.getAttribute("href")?.substring(1) || "";
			const targetElement = document.getElementById(targetId);

			document
				.querySelectorAll("nav a")
				.forEach((link) => link.classList.remove("active"));
			target.classList.add("active");

			if (targetElement) {
				targetElement.scrollIntoView({
					behavior: "smooth",
				});
			}
		});
	});

	document.addEventListener("DOMContentLoaded", () => {
		const sections = document.querySelectorAll("section[id]");
		const navLinks = document.querySelectorAll("nav a[href^='#']");
		const observerOptions = { threshold: 0.6 };
		const observerCallback = (entries) => {
			entries.forEach((entry) => {
				if (entry.isIntersecting) {
					navLinks.forEach((link) => link.classList.remove("active"));
					const id = entry.target.getAttribute("id");
					const activeLink = document.querySelector(
						`nav a[href="#${id}"]`
					);
					if (activeLink) {
						activeLink.classList.add("active");
					}
				}
			});
		};
		const observer = new IntersectionObserver(
			observerCallback,
			observerOptions
		);
		sections.forEach((section) => observer.observe(section));

		const homeLink = document.querySelector(`nav a[href="#home"]`);
		if (homeLink) homeLink.classList.add("active");
	});
</script>

<style>
	@media (max-width: 767px) {
		body {
			padding-bottom: 70px;
		}
	}

	nav a.active {
		color: white !important;
	}
</style>
